---
title: Code as you like

format: 
  html:
    df-print: paged
    toc: true
    warning: false
    message: false
    code-summary: "Show the code"
    code-tools: true
    
bibliography: references.bib
---

::: grid
::: g-col-7
With Quarto you can use **your favorite coding language**, to develop and orchestrated your research project.

The idea is to follow *reproducibility* best practices and derive your reports from code as noted in @anintro2022 .
:::

::: g-col-5
![Research project pyramid](images/Project%20Foundation%20Pyramid.png "Research Project Pyramid"){fig-alt="Research project pyramid" width="66%"}
:::
:::

@fig-data-flowchart with Quarto the workflow of moving from data to publication is more approachable.

```{mermaid}
%%| label: fig-data-flowchart
%%| fig-cap: Flowchart data to publication.

flowchart LR
  A[data] --> C(EDA) --> D(Visualization) 
  D --> E{Quarto:<br/> Reports & Publication}
  E --> F[PDF]
  E --> G[Website]
  E --> H[eBook]
  E --> I(etc.)
```

## Example

I like coding in Tidyverse R via the RStudio IDE using quarto code-notebooks. Quarto also supports other environments and [the first page of this website gives a very brief overview](index.html) of quarto-friendly tools/languages. Read more at https://Quarto.org

### Import data

In the next code chunks, We'll load the `{tidyverse}` suite of packages and import some test data generated for a test survey hosted at Qualtrics. Note, it's very easy to hide the code and just show the results. But here, I'm imagining you want to see the code. In the examples I will hide some of the code, but you can click on the `</> Code` option (above: upper-right,) or the git-hub icon in the navigation bar for direct access to the code. All these helpers are Quarto features.

```{r}
library(tidyverse)
satisfaction_df <- read_csv("data/qualtrics_student_satisfaction-test-data.csv", 
    col_names = FALSE, skip = 3)
my_df_colnames_and_questions <- 
  read_csv("data/qualtrics_student_satisfaction-test-data.csv", 
           n_max = 1) |> 
  janitor::clean_names()
my_colnames_vec <- colnames(my_df_colnames_and_questions)
colnames(satisfaction_df) <- my_colnames_vec
```

### Wrangle

Using one of the quarto-friendly coding languages, we can wrangle our data with a familiar functions (in this case from `{dplyr} {tidyr} {forcats}`) then apply categorical structure, pivot the data for tallying, and subset the data to a small size that is suitable for an demonstration.

```{r}
my_q1q4_levels <- rev(c("Extremely helpful", 
                   "Moderately helpful", 
                   "Slightly helpful", 
                   "Neither helpful nor unhelpful",
                   "Slightly unhelpful", 
                   "Moderately unhelpful", 
                   "Extremely unhelpful" ))

my_df_tall <- satisfaction_df |> 
  select(response_id, q1:last_col()) |> 
  pivot_longer(-c(response_id, q15), 
               names_to = "my_question", 
               values_to = "response") |> 
  filter(my_question %in% c("q1", "q4"))  |> 
  mutate(response = factor(response, levels = my_q1q4_levels)) |> 
  mutate(rnumber = as.numeric(response))
my_df_tall
```

### Visualize

@fig-barplot-survey-results Still using code that is quarto-friendly, we can quickly visualize as we explore our data.

```{r}
#| label: fig-barplot-survey-results
#| fig-cap: Bar plot of survey results.
#| fig-format: svg
#| fig-width: 7
#| fig-asp: .6
#| code-fold: true

my_df_tall |> 
  filter(my_question %in% c("q1", "q4")) |> 
  mutate(response = factor(response, levels = my_q1q4_levels)) |> 
  ggplot(aes(response)) +
  geom_bar() +
  coord_flip() +
  facet_wrap(vars(my_question)) + 
  theme_classic()
```

### Cross references

Quarto will auto-label and anchor figures and tables as well as manage bibliographies. Notice @fig-data-flowchart and @fig-barplot-survey-results above.

An example of a bibliographic reference can be seen here: Quarto delivers practical advantages of *literate coding.* @knuth1984. by allowing me to easily integrate my bibliography manager.

Let's explore a few more quarto features by adding interactivity to my visualization, next --\>

::: {.btn-secondary .btn-sm style="max-width: 6rem;"}
[next ‚ü∂](goo.html)
:::
