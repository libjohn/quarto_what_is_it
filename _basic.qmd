---
format: 
  html:
    df-print: paged
    toc: true
    code-summary: "Show the code"
    keep-hidden: true
    code-tools: true
    warning: false
    message: false
bibliography: references.bib
---

With Quarto you can use **your favorite coding language**, to develop and orchestrated your research project from data to analysis and visualization, to publication.

The idea is to follow *reproducibility* best practices [([Video](https://www.youtube.com/watch?v=VjDM-XsoHUQ))]{.gray} and derive your reports from code. Quarto makes this very convenient.

I like coding in R/Tidyverse via the RStudio IDE using the quarto visual coding notebooks. You may prefer other environments that will also work with Quarto. [The first page of this website gives a very brief overview](index.html) of Quarto-friendly tools/languages. Better yet, read more at https://Quarto.org

## Example

### Import data

In this next code chunks, I'll load the `{tidyverse}` suite of packages and import some test data generated for a test survey hosted at Qualtrics. Using one of the quarto-friendly coding languages, I wrangle my data with my preferred syntax (`{dplyr} {tidyr} {forcats}`) to import the data. Note, it's very easy to hide the code and just show the results. But here, I'm imagining you want to see the code. In the next examples, I may hide some of the code. You can also click on the `</> Code` option in the upper-right, or the git-hub icon for direct access to my code. All these helpers are Quarto features.

```{r}
library(tidyverse)
satisfaction_df <- read_csv("data/qualtrics_student_satisfaction-test-data.csv", 
    col_names = FALSE, skip = 3)
my_df_colnames_and_questions <- 
  read_csv("data/qualtrics_student_satisfaction-test-data.csv", 
           n_max = 1) |> 
  janitor::clean_names()
my_colnames_vec <- colnames(my_df_colnames_and_questions)
colnames(satisfaction_df) <- my_colnames_vec
```

### Wrangle

apply categorical structure, pviot the data for tallying, and subset the data to a small example

```{r}
my_q1q4_levels <- rev(c("Extremely helpful", 
                   "Moderately helpful", 
                   "Slightly helpful", 
                   "Neither helpful nor unhelpful",
                   "Slightly unhelpful", 
                   "Moderately unhelpful", 
                   "Extremely unhelpful" ))

my_df_tall <- satisfaction_df |> 
  select(response_id, q1:last_col()) |> 
  pivot_longer(-c(response_id, q15), 
               names_to = "my_question", 
               values_to = "response") |> 
  filter(my_question %in% c("q1", "q4"))  |> 
  mutate(response = factor(response, levels = my_q1q4_levels)) |> 
  mutate(rnumber = as.numeric(response))
my_df_tall
```

### Visualize

@fig-barplot-survey-results Still using a quarto-friendly code for wrangling, Let me quickly visualize as I explore my data

```{r}
#| label: fig-barplot-survey-results
#| fig-cap: Bar plot of survey results.
#| fig-format: svg
#| fig-width: 7
#| fig-asp: .6
#| code-fold: true

my_df_tall |> 
  filter(my_question %in% c("q1", "q4")) |> 
  mutate(response = factor(response, levels = my_q1q4_levels)) |> 
  ggplot(aes(response)) +
  geom_bar() +
  coord_flip() +
  facet_wrap(vars(my_question)) + 
  theme_classic()
```

### Cross references

Quarto will auto-label and anchor figures and tables cross references, as well as manage bibliographies. Notice @fig-barplot-survey-results above.

An example of a bibliographic reference can be seen here: Quarto delivers practical advantages of *literate coding.* @knuth1984. by allowing me to easily integrate my bibliography manager.

**Let's explore a few more quarto features by adding interactivity to my visualization, next --\>**
