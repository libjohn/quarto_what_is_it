[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About this site",
    "section": "",
    "text": "This site was developed for an Rfun workshop entitled Quarto: a first look. The site was developed using Quarto and published at https://quarto.pub.\nWorking in the Center for Data & Visualization Sciences, John Little is the host of Rfun, a site devoted to learning R and the Tidyverse."
  },
  {
    "objectID": "about.html#data-sets",
    "href": "about.html#data-sets",
    "title": "About this site",
    "section": "Data sets",
    "text": "Data sets\nData for this Quarto publication example are found in the data directory of the GitHub repository:\n\n\n\n\n\n\n\n\nTitle\nInformation\nFilename\n\n\n\n\nQualtrics survey data\nAuto-generated test data generated at Qualtrics compiled using a test survey\nqualtrics_student_satisfaction-test-data.csv\n\n\nMonthly Retail trade data\nhttps://www.census.gov/retail/index.html\ndata.csv"
  },
  {
    "objectID": "about.html#license-and-reuse",
    "href": "about.html#license-and-reuse",
    "title": "About this site",
    "section": "License and Reuse",
    "text": "License and Reuse\n  Creative Commons BY 4.0"
  },
  {
    "objectID": "basic.html",
    "href": "basic.html",
    "title": "Code as you like",
    "section": "",
    "text": "With Quarto you can use your favorite coding language, to develop and orchestrated your research project.\nThe idea is to follow reproducibility best practices and derive your reports from code as noted in “An Introduction to Reproducible Research Practices” (2022) .\n\n\n\n\n\n\n\nFigure 1: Research project pyramid\nWith Quarto the workflow ( Figure 2 ) of moving from data to publication is more approachable."
  },
  {
    "objectID": "basic.html#example",
    "href": "basic.html#example",
    "title": "Code as you like",
    "section": "Example",
    "text": "Example\nI like coding in Tidyverse R via the RStudio IDE using quarto code-notebooks. Quarto also supports other environments and the first page of this website gives a very brief overview of quarto-friendly tools/languages. Read more at https://Quarto.org\n\nImport data\nIn the next code chunks, We’ll load the {tidyverse} suite of packages and import some test data generated for a test survey hosted at Qualtrics.\n\n```{r}\nlibrary(tidyverse)\nsatisfaction_df <- read_csv(\"data/qualtrics_student_satisfaction-test-data.csv\", \n    col_names = FALSE, skip = 3)\nmy_df_colnames_and_questions <- \n  read_csv(\"data/qualtrics_student_satisfaction-test-data.csv\", \n           n_max = 1) |> \n  janitor::clean_names()\nmy_colnames_vec <- colnames(my_df_colnames_and_questions)\ncolnames(satisfaction_df) <- my_colnames_vec\n```\n\n\n\nWrangle\nUsing one of the quarto-friendly coding languages, we can wrangle our data with a familiar functions (in this case from {dplyr} {tidyr} {forcats}) then apply categorical structure, pivot the data for tallying, and subset the data to a small size that is suitable for an demonstration.\n\n\nShow the code\n```{r}\n#| code-fold: true\n\nmy_q1q4_levels <- rev(c(\"Extremely helpful\", \n                   \"Moderately helpful\", \n                   \"Slightly helpful\", \n                   \"Neither helpful nor unhelpful\",\n                   \"Slightly unhelpful\", \n                   \"Moderately unhelpful\", \n                   \"Extremely unhelpful\" ))\n\nmy_df_tall <- satisfaction_df |> \n  select(response_id, q1:last_col()) |> \n  pivot_longer(-c(response_id, q15), \n               names_to = \"my_question\", \n               values_to = \"response\") |> \n  filter(my_question %in% c(\"q1\", \"q4\"))  |> \n  mutate(response = factor(response, levels = my_q1q4_levels)) |> \n  mutate(rnumber = as.numeric(response))\n\nmy_df_tall |> \n  slice_head(n = 6) |> \n  select(response_id, my_question, response) |> \n  gt::gt()\n```\n\n\n\n\n\n\n  \n  \n    \n      response_id\n      my_question\n      response\n    \n  \n  \n    R_e3ejzhVVTZuvmKO\nq1\nSlightly unhelpful\n    R_e3ejzhVVTZuvmKO\nq4\nSlightly helpful\n    R_aXL9ynkORziN92u\nq1\nExtremely unhelpful\n    R_aXL9ynkORziN92u\nq4\nExtremely helpful\n    R_29LPWO0gVguRarc\nq1\nExtremely unhelpful\n    R_29LPWO0gVguRarc\nq4\nExtremely helpful\n  \n  \n  \n\n\n\n\n\n\nVisualize\nFigure 3 Still using code that is quarto-friendly, we can quickly visualize as we explore our data.\n\n\nShow the code\n```{r}\n#| label: fig-barplot-survey-results\n#| fig-cap: Bar plot of survey results.\n#| fig-format: svg\n#| fig-width: 7\n#| fig-asp: .6\n#| code-fold: true\n\nmy_df_tall |> \n  filter(my_question %in% c(\"q1\", \"q4\")) |> \n  mutate(response = factor(response, levels = my_q1q4_levels)) |> \n  ggplot(aes(response)) +\n  geom_bar() +\n  coord_flip() +\n  facet_wrap(vars(my_question)) + \n  theme_classic()\n```\n\n\n\n\n\nFigure 3: Bar plot of survey results.\n\n\n\n\n\n\nCross references\nQuarto will auto-label and anchor figures and tables. Notice Figure 1 , Figure 2 , and Figure 3 above.\nBibliographic reference are also mangaged and easily integrated with citation management tools such as Zotero. For example, you might want to read this article on literate coding by Knuth (1984).\nLet’s explore a few more quarto features by adding interactivity to our visualization ⟶"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "What is Quarto",
    "section": "",
    "text": "Quarto is…\n \nQuarto is an open-source publishing suite\n\n…a tool-suite that supports workflows for reproducible scholarly writing and publishing.\n\nLeveraged by multiple coding languages\n\nPython, R, Julia, ObservableJS\n\nSupported by multiple IDEs\n\nVS Code, Jupyter, RStudio, Neovim\n\nPublish to multiple hosting targets\n\nQuartoPub | GitHub Pages | Posit Connect | Netlify | Others\n\nA useful addition to your reproducible workflow\n\n\n\n\n\n\n\nWebsite & slides\n\n\n\nThis website and the slides were developed via the Quarto suite and published to Quarto.pub\n\n\n\n\n\n\n\n\n\nReusehttps://creativecommons.org/licenses/by/4.0/"
  },
  {
    "objectID": "more_info.html",
    "href": "more_info.html",
    "title": "Quarto documentation and turorials",
    "section": "",
    "text": "As noted, you can compose your quarto code notebooks in VS Code, RStudio, Jupyter, Neovim, or a text editor.\n\n\nThe Quarto getting started page provides customized instruction based on which editor you choose, while the Quarto authoring tutorial shows you how to begin composing your reports.\nBelow, I recommend this excellent how to by Mine Cetinkaya-Rundel (2023) demonstrating the workflow of scientific writing supported with Quarto:\n\n\nOr, see more in this  \n\n\n\n\n\nUsing the command line terminal, type: quarto publish and choose your publish target (i.e. GitHub Pages, Netlify, Quarto.pub, Posit Connect, or Other services.) The Quarto publish documentation explains the details.\n\n\n\n\n\n\nTerminal\n\n\n\nquarto publish"
  },
  {
    "objectID": "more_info.html#introduction-to-reproducible-research-practices",
    "href": "more_info.html#introduction-to-reproducible-research-practices",
    "title": "Quarto documentation and turorials",
    "section": "Introduction to reproducible Research Practices",
    "text": "Introduction to reproducible Research Practices\n\n\n\nQuarto documentation\n\nGuides\nReference documentation\nGallery examples"
  },
  {
    "objectID": "observable.html#interactivity-observablejs",
    "href": "observable.html#interactivity-observablejs",
    "title": "Interactivity: Quarto & Observable JS",
    "section": "Interactivity (Observablejs)",
    "text": "Interactivity (Observablejs)\nThis is a very basic example of diplaying an interactive visualization using ObservableJS.\n\n// viewof my_question = Inputs.radio(\n//  [\"q1\", \"q4\"], \n//  {  value: \"q1\", \n//     label: html`<b>Choose Question</b>`,\n//     multiple: true\n// })\n\nviewof radio_2 = \nInputs.radio(\n  new  Map([\n    [\"Question One\",  'q1'], \n    [\"Question Four\", 'q4']\n  ]),\n  {  label: html`<b>Survey results summarized:</b>`,\n     value: 'q1',\n     multiple: true\n})\n\n\n\n\n\n\n\n\n\n\n\nPlotData\n\n\n\n\nShow the code\n```{ojs}\n//| code-fold: true\n//| echo: fenced\n\nmy_survey_filtered = my_survey\n  .filter(aq.escape(d => d.my_question == radio_2))\n  .groupby('my_question', 'response', 'rnumber')\n  .count()\n  .orderby('my_question', aq.desc('rnumber'))\n  \nPlot.plot({\n  marginRight: 140,\n  y: {\n    axis: null,\n    domain: d3.sort(my_survey_filtered, d => -d.rnumber).map(d => d.response)\n  },\n  x: {\n    grid: true\n  },\n marks: [\n    Plot.barX(my_survey_filtered, {y: \"response\", x: \"count\"}),\n    Plot.text(my_survey_filtered, {\n      x: \"count\",\n      y: \"response\",\n      text: \"response\",\n      textAnchor: \"start\",\n      dx: 6\n    })\n  ]\n})\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmy_survey_filtered.view()"
  },
  {
    "objectID": "observable.html#download",
    "href": "observable.html#download",
    "title": "Interactivity: Quarto & Observable JS",
    "section": "Download",
    "text": "Download\n\ndownloadButton(my_survey.objects(), \"Qualtrics_test_data.csv\")"
  },
  {
    "objectID": "observable.html#transpose-to-arquero",
    "href": "observable.html#transpose-to-arquero",
    "title": "Interactivity: Quarto & Observable JS",
    "section": "Transpose to arquero",
    "text": "Transpose to arquero\n\n\n\nBehind the scenes, when rendering this report, I use {r} code-chunks to import and wrangle the data. Just like I did in code how you like, I’m importing and wrangling my data with a quarto-friendly code language. Then I transpose my data frame into an OJS object.\n\n```{ojs}\n//| echo: fenced\nmy_data = aq.from(transpose(trade_df_ojs))\nmy_survey = aq.from(transpose(my_df_tall_ojs))\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReveal code: click the  icon (scroll to the top)\n\n\n\nThis page reveals the observablejs {ojs} code-chunks. However, this page demonstrates using {r} and {ojs} together in the same quarto-document. You can scroll to the top and click the  icon to see all the code. Or click  in the navigation bar. Quarto makes it easy to include these features."
  },
  {
    "objectID": "observable.html#one-more-example",
    "href": "observable.html#one-more-example",
    "title": "Interactivity: Quarto & Observable JS",
    "section": "One more example",
    "text": "One more example\nThe next code-chunk shows a very simple example of ObservableJS Plot code for visualization. This one is not interactive to show the remarkable similarity to ggplot2 syntax.\nplot\n\n```{ojs}\n//| echo: fenced\nPlot.plot({\n  marks: [\n    Plot.ruleY([0]),\n    Plot.lineY(my_data_wrangled, {\n      x: \"date\",\n      y: \"sales\",\n      stroke: \"business\"\n    }),\n  ]\n})\n```\n\n\n\n\n\n\n\n\n\n\n\n\n↥ Look up!\n\n\n\nNotice the crispness and clarity of the plot (↥↥↥ above.) Even when generating a non-interactive plot, Observable Plot shows well on the web!\n\n\n\nDerive date (arquero data wrangling)\n\nArquero! Now what is that? Well, Observable JavaScript is its own coding language and we can minimize the learning curve by focusing on the Plot grammar and syntax, which is quite similar to ggplot2. However, Observable JS is a complete and rich coding language of its own. But just like Shiny, we want to learn just enough to get the job done. Still, there’s always an edge case where a little data wrangling is optimal. This is where Arquero comes into view. Arquero is easy to learn and use for data transformations, because it was inspired by dplyr.\nSo, aside from the {dplyr} wrangling that I did in the background of this code, I still needed to parse the date fields. Arquero to the rescue. Because meh. I mean, parsing date data-types – so what’s new?\n\n\n```{ojs}\n//| echo: fenced\nmy_data_wrangled = my_data\n  .derive({  date: d =>  op.parse_date(d.date) })\n```"
  },
  {
    "objectID": "observable.html#observablejs-libraries",
    "href": "observable.html#observablejs-libraries",
    "title": "Interactivity: Quarto & Observable JS",
    "section": "Observablejs libraries",
    "text": "Observablejs libraries\nBy convention, observable libraries are loaded at the bottom of a code notebook. You can read more about observablejs at Observablehq.com. By way of a teaser, I didn’t have to use {r} to wrangle the retail data. I could have imported the data directly from observable. Such as ….\n> import { data, advancedDate } from \"@observablehq/monthly-retail-trade-report-data\"\nBut on this page, I’m demonstrating how we leveraged {R} and {ojs} code with Quarto, so that I can introduce some useful interactivity.\n\n```{ojs}\n//| echo: fenced\nimport { aq, op } from '@uwdata/arquero'\n// import { data, advancedDate } from \"@observablehq/monthly-retail-trade-report-data\"\nimport {button as downloadButton} from \"@jeremiak/download-data-button\"\n```"
  },
  {
    "objectID": "slides.html#quarto",
    "href": "slides.html#quarto",
    "title": "What is Quarto",
    "section": "Quarto",
    "text": "Quarto\n\nOpen-source publishing system\nLeveraged by multiple coding languages (Python, R, Julia, ObservableJS)\nSupported by multiple IDEs (VS Code, Jupyter, RStudio, Neovim)\nCan publish to multiple hosting targets (QuartoPub | GitHub Pages | Posit Connect | Netlify | Others)"
  },
  {
    "objectID": "slides.html#notable",
    "href": "slides.html#notable",
    "title": "What is Quarto",
    "section": "Notable",
    "text": "Notable\nEverything I’m going to show you was coded with open-source tools and published via Quarto"
  },
  {
    "objectID": "slides.html#tidyverse",
    "href": "slides.html#tidyverse",
    "title": "What is Quarto",
    "section": "Tidyverse",
    "text": "Tidyverse\nI’m going to use RStudio and freely publish to Quarto.pub\n\nQuarto further develops the workflow of reproducible computation by extending markdown and literate coding workflows\n\n\nIn much the same way that Tidyverse brings consistency and good documentation to base-R, and Tidymodels brings consistency and good documentation to modeling and ML, Quarto brings consistency and good documentation to reproducibility (i.e. [literate] coding.)"
  },
  {
    "objectID": "slides.html#reproducibility-payoff",
    "href": "slides.html#reproducibility-payoff",
    "title": "What is Quarto",
    "section": "Reproducibility Payoff",
    "text": "Reproducibility Payoff\nReproducible workflows for computation thinking\ndata -> analysis -> publishing\n\nDo everything with code\nderive reports from code\n\nQuarto reports can be PDF, MSWord, Slides (PPTx, revealjs, etc.), Websites, Dashboards, eBooks, Blogs, Interactivity apps (ObservableJS; Shiny; more)"
  },
  {
    "objectID": "slides.html#citations-tables-figures-and-scientific-notation",
    "href": "slides.html#citations-tables-figures-and-scientific-notation",
    "title": "What is Quarto",
    "section": "Citations, Tables, Figures, and Scientific Notation",
    "text": "Citations, Tables, Figures, and Scientific Notation\n\nQuarto will generate citations and a bibliography in multiple styles\n\nCan integrate with DOI/Zotero/.bib/.bibtex/Endnote …\n\nQuarto generates numbering for tables and figures\nExcellent support for LaTeX equations and citations"
  },
  {
    "objectID": "slides.html#review",
    "href": "slides.html#review",
    "title": "What is Quarto",
    "section": "Review",
    "text": "Review\nQuarto helps you derive reports from code and facilitates publishing to your favorite host\n\nNote:\nUnlike many other tools, Quarto does not present a lock-in situation. You render Quarto reports that can be hosted anywhere, anytime. Quarto is about scholarly [scientific] communication."
  },
  {
    "objectID": "slides.html#resources",
    "href": "slides.html#resources",
    "title": "What is Quarto",
    "section": "Resources",
    "text": "Resources\n\nMine - YouTube\nMock - YouTube\nQuarto Docs\n\nget started\nguides\nreference\ngallery"
  }
]